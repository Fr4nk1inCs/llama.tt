import Stream
import _abc
import _cython_3_1_4
import cython
import dataclasses
import typing
from cuda.core.experimental._context import Context as Context
from cuda.core.experimental._event import Event as Event, EventOptions as EventOptions
from cuda.core.experimental._graph import GraphBuilder as GraphBuilder
from cuda.core.experimental._utils.clear_error_support import assert_type as assert_type
from typing import Any, Callable, ClassVar

LEGACY_DEFAULT_STREAM: Stream
PER_THREAD_DEFAULT_STREAM: Stream
TYPE_CHECKING: bool
__pyx_capi__: dict
__reduce_cython__: _cython_3_1_4.cython_function_or_method
__setstate_cython__: _cython_3_1_4.cython_function_or_method
__test__: dict

class IsStreamT(typing.Protocol):
    __init__: ClassVar[Callable] = ...
    _abc_impl: ClassVar[_abc._abc_data] = ...
    _is_protocol: ClassVar[bool] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    __parameters__: ClassVar[tuple] = ...
    __protocol_attrs__: ClassVar[set] = ...
    __subclasshook__: ClassVar[method] = ...
    def __cuda_stream__(self) -> tuple[int, int]: ...

class Stream:
    _init: ClassVar[method] = ...
    _legacy_default: ClassVar[method] = ...
    _per_thread_default: ClassVar[method] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    context: Stream.context
    device: Stream.device
    handle: Stream.handle
    is_nonblocking: Stream.is_nonblocking
    priority: Stream.priority
    def __init__(self, *args, **kwargs) -> Any: ...
    def close(self) -> Any: ...
    def create_graph_builder(self) -> GraphBuilder: ...
    @staticmethod
    def from_handle(inthandle: int) -> Stream: ...
    def record(self, event: Event = ..., options: EventOptions = ...) -> Event: ...
    def sync(self) -> Any: ...
    def wait(self, event_or_stream: Event | Stream) -> Any: ...
    def __cuda_stream__(self) -> tuple[int, int]: ...
    def __reduce__(self): ...

class StreamOptions:
    __dataclass_fields__: ClassVar[dict] = ...
    __dataclass_params__: ClassVar[dataclasses._DataclassParams] = ...
    __match_args__: ClassVar[tuple] = ...
    nonblocking: nonblocking
    priority: priority
    def __init__(self, nonblocking: cython.bint = ..., priority: int | None = ...) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self): ...
    def __reduce_cython__(self) -> Any: ...
    def __setstate_cython__(self, __pyx_state) -> Any: ...
