import Buffer
import DeviceMemoryResource
import IPCAllocationHandle
import _abc
import abc
import cuda.bindings.driver
import cython
import dataclasses
import uuid
from _frozen_importlib import PyCapsule
from _typeshed import Incomplete
from cuda.core.experimental._dlpack import DLDeviceType as DLDeviceType, make_py_capsule as make_py_capsule
from cuda.core.experimental._stream import Stream as Stream
from cuda.core.experimental._utils.cuda_utils import Transaction as Transaction, get_binding_version as get_binding_version
from typing import Any, Callable, ClassVar, DevicePointerT

TYPE_CHECKING: bool
__test__: dict

class Buffer(_cyBuffer, MemoryResourceAttributes):
    _init: ClassVar[method] = ...
    from_ipc_descriptor: ClassVar[method] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    device_id: Buffer.device_id
    handle: Buffer.handle
    is_device_accessible: Buffer.is_device_accessible
    is_host_accessible: Buffer.is_host_accessible
    memory_resource: Buffer.memory_resource
    size: Buffer.size
    def __init__(self, *args, **kwargs) -> Any: ...
    def close(self, stream: Stream = ...) -> Any: ...
    def copy_from(self, Buffersrc: Buffer, stream: Stream) -> Any: ...
    def copy_to(self, Bufferdst: Buffer = ..., stream: Stream) -> Buffer: ...
    @staticmethod
    def from_handle(ptr: DevicePointerT, size_tsize, MemoryResourcemr: MemoryResource | None = ...) -> Buffer: ...
    def get_ipc_descriptor(self) -> IPCBufferDescriptor: ...
    def __buffer__(self, intflags: int) -> memoryview: ...
    def __dlpack__(self, intstream: int | None = ..., tuplemax_version: tuple[int, int] | None = ..., tupledl_device: tuple[int, int] | None = ..., copy: bool | None = ...) -> PyCapsule: ...
    def __dlpack_device__(self) -> tuple[int, int]: ...
    def __reduce__(self) -> Any: ...
    def __release_buffer__(self, memoryviewbuffer: memoryview) -> Any: ...

class DeviceMemoryResource(MemoryResource):
    from_allocation_handle: ClassVar[method] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    attributes: DeviceMemoryResource.attributes
    device_id: DeviceMemoryResource.device_id
    handle: DeviceMemoryResource.handle
    is_device_accessible: DeviceMemoryResource.is_device_accessible
    is_handle_owned: DeviceMemoryResource.is_handle_owned
    is_host_accessible: DeviceMemoryResource.is_host_accessible
    is_ipc_enabled: DeviceMemoryResource.is_ipc_enabled
    is_mapped: DeviceMemoryResource.is_mapped
    uuid: DeviceMemoryResource.uuid
    def __init__(self, device_id: int | Device, options=...) -> Any: ...
    def allocate(self, size_tsize, stream: Stream = ...) -> Buffer: ...
    def close(self) -> Any: ...
    def deallocate(self, ptr: DevicePointerT, size_tsize, stream: Stream = ...) -> Any: ...
    @staticmethod
    def from_registry(uuid: uuid.UUID) -> DeviceMemoryResource: ...
    def get_allocation_handle(self) -> IPCAllocationHandle: ...
    def register(self, uuid: uuid.UUID) -> DeviceMemoryResource: ...
    def __reduce__(self) -> Any: ...

class DeviceMemoryResourceAttributes:
    _init: ClassVar[method] = ...
    def __init__(self, *args, **kwargs) -> Any: ...
    @property
    def release_threshold(self) -> Any: ...
    @property
    def reserved_mem_current(self) -> Any: ...
    @property
    def reserved_mem_high(self) -> Any: ...
    @property
    def reuse_allow_internal_dependencies(self) -> Any: ...
    @property
    def reuse_allow_opportunistic(self) -> Any: ...
    @property
    def reuse_follow_event_dependencies(self) -> Any: ...
    @property
    def used_mem_current(self) -> Any: ...
    @property
    def used_mem_high(self) -> Any: ...

class DeviceMemoryResourceOptions:
    __dataclass_fields__: ClassVar[dict] = ...
    __dataclass_params__: ClassVar[dataclasses._DataclassParams] = ...
    __match_args__: ClassVar[tuple] = ...
    ipc_enabled: ipc_enabled
    max_size: max_size
    def __init__(self, ipc_enabled: cython.bint = ..., max_size: cython.int = ...) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self): ...
    def __reduce_cython__(self) -> Any: ...
    def __setstate_cython__(self, __pyx_state) -> Any: ...

class IPCAllocationHandle:
    _init: ClassVar[method] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    handle: IPCAllocationHandle.handle
    uuid: IPCAllocationHandle.uuid
    def __init__(self, *arg, **kwargs) -> Any: ...
    def close(self) -> Any: ...
    def __int__(self) -> int: ...
    def __reduce__(self): ...
    def __reduce_cython__(self) -> Any: ...
    def __setstate_cython__(self, __pyx_state) -> Any: ...

class IPCBufferDescriptor:
    _init: ClassVar[method] = ...
    size: Incomplete
    def __init__(self, *arg, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...

class LegacyPinnedMemoryResource(MemoryResource):
    def allocate(self, size_tsize, stream: Stream = ...) -> Buffer: ...
    def deallocate(self, ptr: DevicePointerT, size_tsize, stream: Stream) -> Any: ...
    @property
    def device_id(self) -> int: ...
    @property
    def is_device_accessible(self) -> bool: ...
    @property
    def is_host_accessible(self) -> bool: ...

class MemoryResource(_cyMemoryResource, MemoryResourceAttributes):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def allocate(self, size_tsize, stream: Stream = ...) -> Buffer: ...
    def deallocate(self, ptr: DevicePointerT, size_tsize, stream: Stream = ...) -> Any: ...
    def __reduce__(self): ...
    def __reduce_cython__(self) -> Any: ...
    def __setstate_cython__(self, __pyx_state) -> Any: ...

class MemoryResourceAttributes(abc.ABC):
    _abc_impl: ClassVar[_abc._abc_data] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    @property
    def device_id(self) -> int: ...
    @property
    def is_device_accessible(self) -> bool: ...
    @property
    def is_host_accessible(self) -> bool: ...

class VirtualMemoryResource(MemoryResource):
    def __init__(self, device, config: VirtualMemoryResourceOptions = ...) -> Any: ...
    def allocate(self, intsize: int, stream: Stream = ...) -> Buffer: ...
    def deallocate(self, intptr: int, intsize: int, stream: Stream = ...) -> None: ...
    def modify_allocation(self, Bufferbuf: Buffer, intnew_size: int, config: VirtualMemoryResourceOptions = ...) -> Buffer: ...
    @property
    def device_id(self) -> int: ...
    @property
    def is_device_accessible(self) -> bool: ...
    @property
    def is_host_accessible(self) -> bool: ...

class VirtualMemoryResourceOptions:
    __init__: ClassVar[Callable] = ...
    _a: ClassVar[type[cuda.bindings.driver.CUmemAllocationType]] = ...
    _access_flags: ClassVar[dict] = ...
    _allocation_type: ClassVar[dict] = ...
    _g: ClassVar[type[cuda.bindings.driver.CUmemAllocationGranularity_flags]] = ...
    _granularity: ClassVar[dict] = ...
    _h: ClassVar[type[cuda.bindings.driver.CUmemAllocationHandleType]] = ...
    _handle_types: ClassVar[dict] = ...
    _l: ClassVar[type[cuda.bindings.driver.CUmemLocationType]] = ...
    _location_type: ClassVar[dict] = ...
    addr_align: ClassVar[None] = ...
    addr_hint: ClassVar[int] = ...
    allocation_type: ClassVar[str] = ...
    gpu_direct_rdma: ClassVar[bool] = ...
    granularity: ClassVar[str] = ...
    handle_type: ClassVar[str] = ...
    location_type: ClassVar[str] = ...
    peer_access: ClassVar[str] = ...
    self_access: ClassVar[str] = ...
    ver_major: ClassVar[int] = ...
    ver_minor: ClassVar[int] = ...
    __dataclass_fields__: ClassVar[dict] = ...
    __dataclass_params__: ClassVar[dataclasses._DataclassParams] = ...
    __eq__: ClassVar[Callable] = ...
    __match_args__: ClassVar[tuple] = ...
    __replace__: ClassVar[Callable] = ...

class _SynchronousMemoryResource(MemoryResource):
    def __init__(self, device_id: int | Device) -> Any: ...
    def allocate(self, size, stream=...) -> Buffer: ...
    def deallocate(self, ptr, size, stream) -> Any: ...
    @property
    def device_id(self) -> int: ...
    @property
    def is_device_accessible(self) -> bool: ...
    @property
    def is_host_accessible(self) -> bool: ...

class _cyBuffer:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...
    def __reduce_cython__(self) -> Any: ...
    def __setstate_cython__(self, __pyx_state) -> Any: ...

class _cyMemoryResource:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...
    def __reduce_cython__(self) -> Any: ...
    def __setstate_cython__(self, __pyx_state) -> Any: ...
