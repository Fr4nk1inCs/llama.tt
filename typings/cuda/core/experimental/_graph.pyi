from _typeshed import Incomplete
from cuda.core.experimental._stream import Stream as Stream
from cuda.core.experimental._utils.cuda_utils import driver as driver, get_binding_version as get_binding_version, handle_return as handle_return
from dataclasses import dataclass

@dataclass
class GraphDebugPrintOptions:
    verbose: bool = ...
    runtime_types: bool = ...
    kernel_node_params: bool = ...
    memcpy_node_params: bool = ...
    memset_node_params: bool = ...
    host_node_params: bool = ...
    event_node_params: bool = ...
    ext_semas_signal_node_params: bool = ...
    ext_semas_wait_node_params: bool = ...
    kernel_node_attributes: bool = ...
    handles: bool = ...
    mem_alloc_node_params: bool = ...
    mem_free_node_params: bool = ...
    batch_mem_op_node_params: bool = ...
    extra_topo_info: bool = ...
    conditional_node_params: bool = ...

@dataclass
class GraphCompleteOptions:
    auto_free_on_launch: bool = ...
    upload_stream: Stream | None = ...
    device_launch: bool = ...
    use_node_priority: bool = ...

class GraphBuilder:
    class _MembersNeededForFinalize:
        stream: Incomplete
        is_stream_owner: Incomplete
        graph: Incomplete
        conditional_graph: Incomplete
        is_join_required: Incomplete
        def __init__(self, graph_builder_obj, stream_obj, is_stream_owner, conditional_graph, is_join_required) -> None: ...
        def close(self) -> None: ...
    def __init__(self) -> None: ...
    @property
    def stream(self) -> Stream: ...
    @property
    def is_join_required(self) -> bool: ...
    def begin_building(self, mode: str = 'relaxed') -> GraphBuilder: ...
    @property
    def is_building(self) -> bool: ...
    def end_building(self) -> GraphBuilder: ...
    def complete(self, options: GraphCompleteOptions | None = None) -> Graph: ...
    def debug_dot_print(self, path, options: GraphDebugPrintOptions | None = None): ...
    def split(self, count: int) -> tuple[GraphBuilder, ...]: ...
    @staticmethod
    def join(*graph_builders) -> GraphBuilder: ...
    def __cuda_stream__(self) -> tuple[int, int]: ...
    def create_conditional_handle(self, default_value=None) -> driver.CUgraphConditionalHandle: ...
    def if_cond(self, handle: driver.CUgraphConditionalHandle) -> GraphBuilder: ...
    def if_else(self, handle: driver.CUgraphConditionalHandle) -> tuple[GraphBuilder, GraphBuilder]: ...
    def switch(self, handle: driver.CUgraphConditionalHandle, count: int) -> tuple[GraphBuilder, ...]: ...
    def while_loop(self, handle: driver.CUgraphConditionalHandle) -> GraphBuilder: ...
    def close(self) -> None: ...
    def add_child(self, child_graph: GraphBuilder): ...

class Graph:
    class _MembersNeededForFinalize:
        graph: Incomplete
        def __init__(self, graph_obj, graph) -> None: ...
        def close(self) -> None: ...
    def __init__(self) -> None: ...
    def close(self) -> None: ...
    def update(self, builder: GraphBuilder): ...
    def upload(self, stream: Stream): ...
    def launch(self, stream: Stream): ...
