import Event
import _cython_3_1_4
import _thread
import dataclasses
from cuda.core.experimental._context import Context as Context
from cuda.core.experimental._utils.cuda_utils import CUDAError as CUDAError
from typing import Any, ClassVar

TYPE_CHECKING: bool
__reduce_cython__: _cython_3_1_4.cython_function_or_method
__setstate_cython__: _cython_3_1_4.cython_function_or_method
__test__: dict

class Event:
    _init: ClassVar[method] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    context: Event.context
    device: Event.device
    handle: Event.handle
    is_done: Event.is_done
    is_ipc_supported: Event.is_ipc_supported
    is_sync_busy_waited: Event.is_sync_busy_waited
    is_timing_disabled: Event.is_timing_disabled
    def __init__(self, *args, **kwargs) -> Any: ...
    def close(self) -> Any: ...
    def sync(self) -> Any: ...
    def __isub__(self, other): ...
    def __reduce__(self): ...
    def __rsub__(self, other): ...
    def __sub__(self, other): ...

class EventOptions:
    __pyx_recursive_repr_guard: ClassVar[_thread._local] = ...
    __dataclass_fields__: ClassVar[dict] = ...
    __dataclass_params__: ClassVar[dataclasses._DataclassParams] = ...
    __match_args__: ClassVar[tuple] = ...
    busy_waited_sync: busy_waited_sync
    enable_timing: enable_timing
    support_ipc: support_ipc
    def __init__(self, enable_timing: bool | None = ..., busy_waited_sync: bool | None = ..., support_ipc: bool | None = ...) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self): ...
    def __reduce_cython__(self) -> Any: ...
    def __setstate_cython__(self, __pyx_state) -> Any: ...
