from _typeshed import Incomplete
from cuda.core.experimental._launch_config import LaunchConfig as LaunchConfig
from cuda.core.experimental._stream import Stream as Stream
from cuda.core.experimental._utils.clear_error_support import assert_type as assert_type, assert_type_str_or_bytes_like as assert_type_str_or_bytes_like, raise_code_path_meant_to_be_unreachable as raise_code_path_meant_to_be_unreachable
from cuda.core.experimental._utils.cuda_utils import driver as driver, get_binding_version as get_binding_version, handle_return as handle_return, precondition as precondition
from typing import NamedTuple

class KernelAttributes:
    def __new__(self, *args, **kwargs) -> None: ...
    slots: Incomplete
    def max_threads_per_block(self, device_id: int = None) -> int: ...
    def shared_size_bytes(self, device_id: int = None) -> int: ...
    def const_size_bytes(self, device_id: int = None) -> int: ...
    def local_size_bytes(self, device_id: int = None) -> int: ...
    def num_regs(self, device_id: int = None) -> int: ...
    def ptx_version(self, device_id: int = None) -> int: ...
    def binary_version(self, device_id: int = None) -> int: ...
    def cache_mode_ca(self, device_id: int = None) -> bool: ...
    def max_dynamic_shared_size_bytes(self, device_id: int = None) -> int: ...
    def preferred_shared_memory_carveout(self, device_id: int = None) -> int: ...
    def cluster_size_must_be_set(self, device_id: int = None) -> bool: ...
    def required_cluster_width(self, device_id: int = None) -> int: ...
    def required_cluster_height(self, device_id: int = None) -> int: ...
    def required_cluster_depth(self, device_id: int = None) -> int: ...
    def non_portable_cluster_size_allowed(self, device_id: int = None) -> bool: ...
    def cluster_scheduling_policy_preference(self, device_id: int = None) -> int: ...

class MaxPotentialBlockSizeOccupancyResult(NamedTuple):
    min_grid_size: Incomplete
    max_block_size: Incomplete

class KernelOccupancy:
    def __new__(self, *args, **kwargs) -> None: ...
    slots: Incomplete
    def max_active_blocks_per_multiprocessor(self, block_size: int, dynamic_shared_memory_size: int) -> int: ...
    def max_potential_block_size(self, dynamic_shared_memory_needed: int | driver.CUoccupancyB2DSize, block_size_limit: int) -> MaxPotentialBlockSizeOccupancyResult: ...
    def available_dynamic_shared_memory_per_block(self, num_blocks_per_multiprocessor: int, block_size: int) -> int: ...
    def max_potential_cluster_size(self, config: LaunchConfig, stream: Stream | None = None) -> int: ...
    def max_active_clusters(self, config: LaunchConfig, stream: Stream | None = None) -> int: ...

class ParamInfo(NamedTuple):
    offset: Incomplete
    size: Incomplete

class Kernel:
    def __new__(self, *args, **kwargs) -> None: ...
    @property
    def attributes(self) -> KernelAttributes: ...
    @property
    def num_arguments(self) -> int: ...
    @property
    def arguments_info(self) -> list[ParamInfo]: ...
    @property
    def occupancy(self) -> KernelOccupancy: ...
CodeTypeT = bytes | bytearray | str

class ObjectCode:
    def __new__(self, *args, **kwargs) -> None: ...
    def __reduce__(self): ...
    @staticmethod
    def from_cubin(module: bytes | str, *, name: str = '', symbol_mapping: dict | None = None) -> ObjectCode: ...
    @staticmethod
    def from_ptx(module: bytes | str, *, name: str = '', symbol_mapping: dict | None = None) -> ObjectCode: ...
    @staticmethod
    def from_ltoir(module: bytes | str, *, name: str = '', symbol_mapping: dict | None = None) -> ObjectCode: ...
    @staticmethod
    def from_fatbin(module: bytes | str, *, name: str = '', symbol_mapping: dict | None = None) -> ObjectCode: ...
    @staticmethod
    def from_object(module: bytes | str, *, name: str = '', symbol_mapping: dict | None = None) -> ObjectCode: ...
    @staticmethod
    def from_library(module: bytes | str, *, name: str = '', symbol_mapping: dict | None = None) -> ObjectCode: ...
    def get_kernel(self, name) -> Kernel: ...
    @property
    def code(self) -> CodeTypeT: ...
    @property
    def name(self) -> str: ...
    @property
    def code_type(self) -> str: ...
    @property
    def handle(self): ...
