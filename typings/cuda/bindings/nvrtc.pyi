import _cython_3_1_4
import cuda.bindings.driver as _driver
import enum
from _typeshed import Incomplete
from typing import Any, Callable, ClassVar

__reduce_cython__: _cython_3_1_4.cython_function_or_method
__setstate_cython__: _cython_3_1_4.cython_function_or_method
__test__: dict
nvrtcAddNameExpression: _cython_3_1_4.cython_function_or_method
nvrtcCompileProgram: _cython_3_1_4.cython_function_or_method
nvrtcCreateProgram: _cython_3_1_4.cython_function_or_method
nvrtcDestroyProgram: _cython_3_1_4.cython_function_or_method
nvrtcGetCUBIN: _cython_3_1_4.cython_function_or_method
nvrtcGetCUBINSize: _cython_3_1_4.cython_function_or_method
nvrtcGetErrorString: _cython_3_1_4.cython_function_or_method
nvrtcGetLTOIR: _cython_3_1_4.cython_function_or_method
nvrtcGetLTOIRSize: _cython_3_1_4.cython_function_or_method
nvrtcGetLoweredName: _cython_3_1_4.cython_function_or_method
nvrtcGetNVVM: _cython_3_1_4.cython_function_or_method
nvrtcGetNVVMSize: _cython_3_1_4.cython_function_or_method
nvrtcGetNumSupportedArchs: _cython_3_1_4.cython_function_or_method
nvrtcGetOptiXIR: _cython_3_1_4.cython_function_or_method
nvrtcGetOptiXIRSize: _cython_3_1_4.cython_function_or_method
nvrtcGetPCHCreateStatus: _cython_3_1_4.cython_function_or_method
nvrtcGetPCHHeapSize: _cython_3_1_4.cython_function_or_method
nvrtcGetPCHHeapSizeRequired: _cython_3_1_4.cython_function_or_method
nvrtcGetPTX: _cython_3_1_4.cython_function_or_method
nvrtcGetPTXSize: _cython_3_1_4.cython_function_or_method
nvrtcGetProgramLog: _cython_3_1_4.cython_function_or_method
nvrtcGetProgramLogSize: _cython_3_1_4.cython_function_or_method
nvrtcGetSupportedArchs: _cython_3_1_4.cython_function_or_method
nvrtcSetFlowCallback: _cython_3_1_4.cython_function_or_method
nvrtcSetPCHHeapSize: _cython_3_1_4.cython_function_or_method
nvrtcVersion: _cython_3_1_4.cython_function_or_method
sizeof: _cython_3_1_4.cython_function_or_method

class _HelperCUcoredumpSettings:
    cptr: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def pyObj(self) -> Any: ...
    def size(self) -> Any: ...
    def __reduce__(self): ...

class _HelperCUgraphMem_attribute:
    cptr: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def pyObj(self) -> Any: ...
    def __reduce__(self): ...

class _HelperCUjit_option:
    cptr: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...

class _HelperCUlibraryOption:
    cptr: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...

class _HelperCUmemAllocationHandleType:
    cptr: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def pyObj(self) -> Any: ...
    def __reduce__(self): ...

class _HelperCUmemPool_attribute:
    cptr: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def pyObj(self) -> Any: ...
    def __reduce__(self): ...

class _HelperCUmem_range_attribute:
    cptr: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def pyObj(self) -> Any: ...
    def __reduce__(self): ...

class _HelperCUpointer_attribute:
    cptr: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def pyObj(self) -> Any: ...
    def __reduce__(self): ...

class _HelperCudaJitOption:
    cptr: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...

class _HelperCudaLibraryOption:
    cptr: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...

class _HelperInputVoidPtr:
    cptr: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...

class _HelperKernelParams:
    max_param_size: ClassVar[int] = ...
    supported_types: ClassVar[set] = ...
    ckernelParams: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...

class _InputVoidPtrPtrHelper:
    cptr: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...

class nvrtcProgram:
    def __init__(self, *args, **kwargs) -> Any: ...
    def getPtr(self) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self): ...

class nvrtcResult(enum.IntEnum):
    __new__: ClassVar[Callable] = ...
    NVRTC_ERROR_BUILTIN_OPERATION_FAILURE: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_CANCELLED: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_COMPILATION: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_INTERNAL_ERROR: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_INVALID_INPUT: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_INVALID_OPTION: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_INVALID_PROGRAM: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_NAME_EXPRESSION_NOT_VALID: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_NO_LOWERED_NAMES_BEFORE_COMPILATION: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_NO_NAME_EXPRESSIONS_AFTER_COMPILATION: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_NO_PCH_CREATE_ATTEMPTED: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_OUT_OF_MEMORY: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_PCH_CREATE: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_PCH_CREATE_HEAP_EXHAUSTED: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_PROGRAM_CREATION_FAILURE: ClassVar[nvrtcResult] = ...
    NVRTC_ERROR_TIME_FILE_WRITE_FAILED: ClassVar[nvrtcResult] = ...
    NVRTC_SUCCESS: ClassVar[nvrtcResult] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[int]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _unhashable_values_map_: ClassVar[dict] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    def __format__(self, *args, **kwargs) -> str: ...
